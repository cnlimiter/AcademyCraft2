plugins {
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.71'
}

version = mod_version
group = mod_group_id
base {
    archivesName = "${mod_name}-${mc_version}"
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', mod_id

        programArguments(Arrays.asList("--mixin mixins.${mod_id}.json".split(' ')))

        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run/client')
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        workingDirectory project.file('run/server')
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'


}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: mc_version, mc_range: mc_range,
        forge_version    : "${mc_version}-${neo_version}", forge_version_range: neo_range,
        loader_range     : loader_range,
        mod_id           : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        issue_tracker    : issue_tracker,
        mod_authors      : mod_authors, mod_description: mod_description
]
tasks.withType(ProcessResources).configureEach {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.release.set(17)
    options.compilerArgs.add("-Xlint:-removal")
}